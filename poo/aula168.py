# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes derivadas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura),
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢mentros e retorno iguais
# SO"L"IDO
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclase devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload) üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

 

class Notificacao(ABC):

    def __init__(self, mensagem):
        self.msg = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...


class NotificacaoEmail(Notificacao):

    def __init__(self, mensagem):
        super().__init__(mensagem)

    def enviar(self) -> bool: 
        print('Email: enviando -', self.msg)
        return True


class NotificacaoSMS(Notificacao):

    def __init__(self, mensagem):
        super().__init__(mensagem)

    def enviar(self) -> bool: 
        print('SMS: enviando -', self.msg)
        return False

###############################################################################

def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada: 
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o  N√ÉO enviada')



notificacao_email = NotificacaoEmail('Notifica√ß√£o E-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('Notifica√ß√£o SMS')
notificar(notificacao_sms)
